import ccxt
import pandas as pd
import asyncio
import nest_asyncio
import requests
import config  # Import the config module
from datetime import datetime, timezone

interval = '4h'  # 4-hour candlesticks

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=100):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate VWMA
def calculate_vwma(df, period):
    return (df['close'] * df['volume']).rolling(window=period).sum() / df['volume'].rolling(window=period).sum()

# Function to check VWMA cross
def check_vwma_cross(df, short_period=3, long_period=7):
    df['vwma_short'] = calculate_vwma(df, short_period)
    df['vwma_long'] = calculate_vwma(df, long_period)

    cross_over = df['vwma_short'].iloc[-2] >= df['vwma_long'].iloc[-2] and df['vwma_short'].iloc[-3] <= df['vwma_long'].iloc[-3]
    cross_under = df['vwma_short'].iloc[-2] <= df['vwma_long'].iloc[-2] and df['vwma_short'].iloc[-3] >= df['vwma_long'].iloc[-3]

    return cross_over, cross_under

# Function to calculate RSI
def calculate_rsi(df, period):
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()

    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# Function to send a message to 3commas using a webhook
def send_3commas_message(symbol, action, close_price):
    # Check if the current message is the same as the previous one for this symbol
    if last_alert_messages.get(symbol) != action:
        # Prepare payload based on the action
        timestamp = datetime.now(timezone.utc).isoformat()  # ISO 8601 format
        payload = {
            "secret": config.SECRET,  # Ensure you have set this in your config module
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "BINANCE",  # Ensure correct casing
            "tv_instrument": symbol.replace('/', '') + '.P',  # Adjust format as needed
            "action": action,
            "bot_uuid": "3054d7a6-d6ac-4e32-9abb-1f92ca1fa837"  # Ensure this is correct
        }

        url = config.THREE_COMMAS_WEBHOOK_URL  # Ensure you have set this in your config module
        response = requests.post(url, json=payload)
        
        if response.status_code == 200:
            print(f"Successfully sent alert for {symbol} with action {action}")
            # Update the last alert message for this symbol
            last_alert_messages[symbol] = action
        else:
            print(f"Failed to send alert for {symbol}: {response.content}")

# Main function (now defined as async)
async def main():
    while True:
        for symbol in config.SELECTED_SYMBOLS:  # Ensure you have set this in your config module
            try:
                historical_data = get_historical_data(symbol, interval)
                cross_over, cross_under = check_vwma_cross(historical_data)
                close_price = historical_data['close'].iloc[-1]

                # Calculate RSI for 6 and 21 periods
                rsi_6 = calculate_rsi(historical_data, 6)
                rsi_21 = calculate_rsi(historical_data, 21)

                # Get the last RSI values
                last_rsi_6 = rsi_6.iloc[-2]
                last_rsi_21 = rsi_21.iloc[-2]

                # Define your conditions for sending alerts based on RSI and VWMA
                if cross_over and last_rsi_6 <=  last_rsi_21:
                    send_3commas_message(symbol, "enter_long", close_price)
                elif cross_under and last_rsi_6 >= last_rsi_21:
                    send_3commas_message(symbol, "enter_short", close_price)
                # Add more conditions if needed, depending on your trading strategy.

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        # Sleep for a specified interval before checking again
        await asyncio.sleep(300)  # 5 minutes

# Use nest_asyncio to allow running asyncio in Jupyter notebooks
nest_asyncio.apply()

# Create and run the event loop
asyncio.run(main())