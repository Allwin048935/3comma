import ccxt
import pandas as pd
import asyncio
import nest_asyncio
import requests
import config1  # Updated to config1
from datetime import datetime, timezone

interval = '3m'  # 3-minute candlesticks

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config1.API_KEY,  # Updated to config1
    'secret': config1.API_SECRET,  # Updated to config1
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=100):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate EMA
def calculate_ema(df, period):
    return df['close'].ewm(span=period, adjust=False).mean()

# Function to check EMA crossover against highest and lowest of last 2 to 6 candles (excluding current candle)
def check_ema_crossover_vs_high_low(df, short_period=2):
    # Calculate short-term EMA
    df['ema_short'] = calculate_ema(df, short_period)
    
    # Find highest and lowest from the 2nd to 6th most recent candles (excluding current candle)
    df['highest_5'] = df['high'].shift(1).rolling(window=5).max()  # Shift by 1 to exclude current candle
    df['lowest_5'] = df['low'].shift(1).rolling(window=5).min()    # Shift by 1 to exclude current candle
    
    # Check crossover conditions (compare EMA with highest/lowest of candles 2-6)
    cross_over = df['ema_short'].iloc[-2] > df['highest_5'].iloc[-2]  # EMA crosses above highest of 2-6
    cross_under = df['ema_short'].iloc[-2] < df['lowest_5'].iloc[-2]  # EMA crosses below lowest of 2-6
    
    return cross_over, cross_under

# Function to get previous day's amplitude ratio
def get_previous_day_amplitude(symbol):
    # Fetch 1-day candlesticks, limit to 5 (current and previous 4 days)
    daily_ohlcv = binance.fetch_ohlcv(symbol, '1d', limit=5)
    df_daily = pd.DataFrame(daily_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df_daily['timestamp'] = pd.to_datetime(df_daily['timestamp'], unit='ms')
    df_daily.set_index('timestamp', inplace=True)
    
    # Get the amplitude of the previous day
    prev_day_high = df_daily['high'].iloc[-2]
    prev_day_low = df_daily['low'].iloc[-2]
    
    # Calculate amplitude ratio (high/low)
    amplitude_ratio = prev_day_high / prev_day_low
    return amplitude_ratio

# Function to send a message to 3commas using a webhook
def send_3commas_message(symbol, action, close_price):
    if last_alert_messages.get(symbol) != action:
        timestamp = datetime.now(timezone.utc).isoformat()
        payload = {
            "secret": config1.SECRET,  # Updated to config1
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "BINANCE",
            "tv_instrument": symbol.replace('/', '') + '.P',
            "action": action,
            "bot_uuid": "2cb946f7-4b8e-4a76-93d8-76fd0d6900d0"
        }

        try:
            url = config1.THREE_COMMAS_WEBHOOK_URL  # Updated to config1
            response = requests.post(url, json=payload)

            if response.status_code == 200:
                print(f"Successfully sent alert for {symbol} with action {action}")
                last_alert_messages[symbol] = action
            else:
                print(f"Failed to send alert for {symbol}: {response.content}")

        except requests.RequestException as e:
            print(f"Error sending request for {symbol}: {e}")

# Main function (now defined as async)
async def main():
    while True:
        for symbol in config1.SELECTED_SYMBOLS:  # Updated to config1
            try:
                # Fetch historical data for each symbol
                historical_data = get_historical_data(symbol, interval)
                
                # Check for EMA crossover vs. highest/lowest of last 2 to 6 candles
                cross_over, cross_under = check_ema_crossover_vs_high_low(historical_data)

                close_price = historical_data['close'].iloc[-1]

                # Get amplitude ratio for the previous day
                amplitude_ratio = get_previous_day_amplitude(symbol)

                # Print the amplitude ratio value
                #print(f"Amplitude ratio for {symbol}: {amplitude_ratio}")

                # Check if the amplitude ratio condition is met (minimum 1.1 for 10% change)
                if amplitude_ratio >= 1.11:
                    # Determine the action based on EMA crossover compared to highest/lowest of last 2 to 6 candles
                    if cross_over:
                        send_3commas_message(symbol, "enter_long", close_price)
                    elif cross_under:
                        send_3commas_message(symbol, "enter_short", close_price)
                else:
                    print(f"Amplitude condition not met for {symbol}, skipping...")

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        # Sleep for a while before checking again
        await asyncio.sleep(180)  # Sleep for 3 minutes (in seconds)

# Use nest_asyncio to allow running asyncio in Jupyter notebooks
nest_asyncio.apply()

# Create and run the event loop
asyncio.run(main())